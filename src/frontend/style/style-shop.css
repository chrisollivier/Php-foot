:root {
    font-size: 16px;
    font-family: "Roboto", sans-serif;
    --text-primary: #08ec7f;
    --text-secondary: #06C167;
    --bg-primary: #09193E;
    --bg-secondary: #1f2448;
    --item-primary: #cffd00;
    --item-primary: #CDFB0A;
}

.item-product {
    margin: 0;
}

* {
    margin: 0;
    padding: 0;
    outline: none;
}

body {
    margin: 0;
    padding: 0;
    outline: none;
    background: #ffffff;
}

.grid-container {
    max-width: 100vw;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: repeat(auto-fill, 200px);
    row-gap: 20px;
    column-gap: 50px;
}


/*
=====
CORE STYLES
=====
*/

.toggle {
    --uiToggleSize: var(--toggleSize, 1.25rem);
    --uiToggleBorderWidth: var(--toggleBorderWidth, 2px);
    --uiToggleColor: var(--toggleColor, #222);

    display: var(--toggleDisplay, inline-flex);
    position: relative;
}

.toggle__input {
    /*
    The pattern by Sara Soueidan https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
    */
    width: var(--uiToggleSize);
    height: var(--uiToggleSize);
    opacity: 0;

    position: absolute;
    top: 0;
    left: 0;
    margin: 0;
}

/*
1. Calculation of the gap for the custom checkbox
*/

.toggle__label {
    display: inline-flex;
    min-height: var(--uiToggleSize);
    padding-left: calc(var(--uiToggleSize) + var(--toggleIndent, .4em));
}

.toggle__input:not(:disabled) ~ .toggle__label {
    cursor: pointer;
}

/*
1. Ems helps to calculate size of the checkbox
*/

.toggle__label::after {
    content: "";
    box-sizing: border-box;
    width: 1em;
    height: 1em;
    font-size: var(--uiToggleSize); /* 1 */

    background-color: transparent;
    border: var(--uiToggleBorderWidth) solid var(--uiToggleColor);

    position: absolute;
    left: 0;
    top: 0;
    z-index: 2;
}

.toggle__input:checked ~ .toggle__label::after {
    background-color: var(--uiToggleColor);
}

.toggle__text {
    margin-top: auto;
    margin-bottom: auto;
}

/*
The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element toggle

1. Ems helps to calculate size and position of the arrow
*/

.toggle__label::before {
    content: "";
    width: 0;
    height: 0;
    font-size: var(--uiToggleSize); /* 1 */

    border-left-width: 0;
    border-bottom-width: 0;
    border-left-style: solid;
    border-bottom-style: solid;
    border-color: var(--toggleArrowColor, #fff);

    position: absolute;
    top: .5428em;
    left: .25em;
    z-index: 3;

    transform-origin: left top;
    transform: rotate(-40deg) skew(10deg);
}

.toggle__input:checked ~ .toggle__label::before {
    --uiToggleArrowWidth: var(--toggleArrowWidth, 2px);

    width: .4em;
    height: .2em;
    border-left-width: var(--uiToggleArrowWidth);
    border-bottom-width: var(--uiToggleArrowWidth);
}

/*
States
*/

/* focus state */

.toggle:focus-within {
    outline: var(--toggleOutlineWidthFocus, 3px) solid var(--toggleOutlineColorFocus, currentColor);
    outline-offset: var(--toggleOutlineOffsetFocus, 5px);
}

/* disabled state */

.toggle__input:disabled ~ .toggle__label {
    opacity: var(--toggleOpacityDisabled, .24);
    cursor: var(--toggleCursorDisabled, not-allowed);
    user-select: none;
}

/*
=====
PRESENTATION STYLES
=====
*/

/*
The demo skin
*/

.toggle__label::after {
    border-radius: var(--toggleBorderRadius, 2px);
}

/*
The animation of switching states
*/

.toggle__input:not(:disabled) ~ .toggle__label::before {
    will-change: width, height;
    opacity: 0;
}

.toggle__input:not(:disabled):checked ~ .toggle__label::before {
    opacity: 1;
    transition: opacity .1s ease-out .25s, width .1s ease-out .5s, height .2s ease-out .3s;
}

.toggle__input:not(:disabled) ~ .toggle__label::after {
    will-change: background-color;
    transition: background-color .2s ease-out;
}

/*
=====
SETTINGS
=====
*/

.page__custom-settings {
    --toggleColor: #690e90;
    --toggleOutlineColorFocus: #690e90;
    --toggleSize: 2rem;
}


/*
=====
DEMO
=====
*/

body {
    min-height: 100vh;
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Open Sans, Ubuntu, Fira Sans, Helvetica Neue, sans-serif;
    display: flex;
    flex-direction: column;
}

.page {
    box-sizing: border-box;
    max-width: 45rem;
    padding: 2.75rem 2rem 2.5rem;
    margin: auto;

    background-color: #fff;
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2);
    border-radius: 2px;
}

.page__section {
    display: flex;
    flex-wrap: wrap;
    font-weight: 700;
}

.page__section:nth-child(n+2) {
    margin-top: 3rem;
}

.page__custom-settings {
    --pageToggleTextFontSize: 1.25rem;
}

.page__name {
    width: 100%;
}

.page__name::first-letter {
    text-transform: uppercase;
}

.page__toggle {
    margin-top: 1.25rem;
    margin-right: 1.5rem;
    font-size: var(--pageToggleTextFontSize);
}

.product-container {
    margin-bottom: 25px;
    margin-top: 25px;
    width: 200px;
    height: 350px;
    border-radius: 20px;
    justify-content: center;
    overflow: hidden;
    border: solid;
    border-color: --bg-primary;
}

.image-container {
    background-color: #EDEDED;
    width: 200px;
    height: 200px;
}

img {
    justify-content: center;
    margin: 10px;
    width: 180px;
    height: 180px;
}

.product-descripton {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    margin-top: auto;
    width: 200px;
    height: 150px;
    color: var(--text-secondary);
    background-color: var(--bg-primary);
}

.product-colorNsize {
    display: flex;
    justify-content: space-between;
    padding: 10px;
}


.product-price {
    display: flex;
    justify-content: space-between;
    padding: 10px;
}


input.cart {
    padding-left: 20px;
    padding-bottom: 10px;
    align-self: flex-end;
    color: var(--text-secondary);
    font-size: 60px;
    font-weight: bold;
    background: var(--bg-primary);
    outline: none;
    border: none;
}

.accountHeader {
    display: flex;
    margin-bottom: 10mm;
    justify-content: space-between;
}

.userInfo {
    display: flex;
    align-content: space-between;
    width: 100%;
}

.inputInfo {
    width: 33%;
}

.userImg {
    width: 100px;
    height: 100px;
    margin: 0;
    padding: 0;
    display: flex;
}

.inputInfoLabel {
    margin-left: 6mm;
}

.sexInfo {
    display: table-row;
    width: 33%;
}

.inputInfo {
    width: 33%;
    display: inline-block;
    justify-content: center;
}

.imageInfo {
    display: flex;
    justify-content: center;
    align-items: center;
}

/*
=====
CORE STYLES
=====
*/

.toggle {
    --uiToggleSize: var(--toggleSize, 1.25rem);
    --uiToggleBorderWidth: var(--toggleBorderWidth, 2px);
    --uiToggleColor: var(--toggleColor, var(--text-primary));
    border: none;
    display: var(--toggleDisplay, inline-flex);
    position: relative;
}

.toggle__input {
    /*
    The pattern by Sara Soueidan https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
    */
    width: var(--uiToggleSize);
    height: var(--uiToggleSize);
    opacity: 0;
    border: none;
    position: absolute;
    top: 0;
    left: 0;
    margin: 0;
}

/*
1. Calculation of the gap for the custom checkbox
*/

.toggle__label {
    display: inline-flex;
    border: none;
    min-height: var(--uiToggleSize);
    padding-left: calc(var(--uiToggleSize) + var(--toggleIndent, .4em));
}

.toggle__input:not(:disabled) ~ .toggle__label {
    border: none;
    cursor: pointer;
}

/*
1. Ems helps to calculate size of the checkbox
*/

.toggle__label::after {
    border: none;
    content: "";
    box-sizing: border-box;
    width: 1em;
    height: 1em;
    font-size: var(--uiToggleSize); /* 1 */

    background-color: transparent;
    border: var(--uiToggleBorderWidth) solid var(--uiToggleColor);

    position: absolute;
    left: 0;
    top: 0;
    z-index: 2;
}

.toggle__input:checked ~ .toggle__label::after {
    border: none;
    background-color: var(--uiToggleColor);
}

.toggle__text {
    margin-top: auto;
    margin-bottom: auto;
}

/*
The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element toggle

1. Ems helps to calculate size and position of the arrow
*/

.toggle__label::before {
    content: "";
    width: 0;
    height: 0;
    font-size: var(--uiToggleSize); /* 1 */

    border-left-width: 0;
    border-bottom-width: 0;
    border-left-style: solid;
    border-bottom-style: solid;
    border-color: var(--toggleArrowColor, #2a2828);

    position: absolute;
    top: .5428em;
    left: .25em;
    z-index: 3;

    transform-origin: left top;
    transform: rotate(-40deg) skew(10deg);
}

.toggle__input:checked ~ .toggle__label::before {
    --uiToggleArrowWidth: var(--toggleArrowWidth, 2px);

    width: .4em;
    height: .2em;
    border-left-width: var(--uiToggleArrowWidth);
    border-bottom-width: var(--uiToggleArrowWidth);
}

/*
States
*/

/* focus state */

.toggle:focus-within {
    outline: var(--toggleOutlineWidthFocus, 3px) solid var(--toggleOutlineColorFocus, currentColor);
    outline-offset: var(--toggleOutlineOffsetFocus, 5px);
}

/* disabled state */

.toggle__input:disabled ~ .toggle__label {
    opacity: var(--toggleOpacityDisabled, .24);
    cursor: var(--toggleCursorDisabled, not-allowed);
    user-select: none;
}

/*
=====
PRESENTATION STYLES
=====
*/

/*
The demo skin
*/

.toggle__label::after {
    border-radius: var(--toggleBorderRadius, 2px);
}

/*
The animation of switching states
*/

.toggle__input:not(:disabled) ~ .toggle__label::before {
    will-change: width, height;
    opacity: 0;
}

.toggle__input:not(:disabled):checked ~ .toggle__label::before {
    opacity: 1;
    transition: opacity .1s ease-out .25s, width .1s ease-out .5s, height .2s ease-out .3s;
}

.toggle__input:not(:disabled) ~ .toggle__label::after {
    will-change: background-color;
    transition: background-color .2s ease-out;
}


@media screen and (max-width: 800px) {
    .grid-container {
        margin-left: 0;
        width: 80%;
        display: grid;
        grid-template-columns: repeat(auto-fill, 350px);
        row-gap: 20px;
        column-gap: 20px;
    }

    .product-container {
        margin: 0px;
        width: 200px;
        height: 350px;
        border-radius: 20px;
        justify-content: center;
        overflow: hidden;
    }

}

@media screen and (max-width: 400px) {
    .grid-container {
        margin-left: 0rem;
        width: 80%;
        display: grid;
        grid-template-columns: repeat(auto-fill, 350px);
        row-gap: 20px;
        column-gap: 20px;
    }

    .product-container {
        margin: 0px;
        width: 200px;
        height: 350px;
        border-radius: 20px;
        justify-content: center;
        overflow: hidden;
    }
}
